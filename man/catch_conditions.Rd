% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catch_conditions.R
\name{catch_conditions}
\alias{catch_conditions}
\title{Evaluate an Expression and Capture Condition Objects}
\usage{
catch_conditions(expr, default = NULL)
}
\arguments{
\item{expr}{Expression to evaluate (enclosed in braces or as a call).}

\item{default}{Value to return if an error occurs. Default: \code{NULL}.}
}
\value{
A list with elements:
\itemize{
\item \code{value} — The evaluation result or the fallback \code{default} if an error occurred.
\item \code{warning} — A list of captured warning condition objects (or \code{NULL} if none).
\item \code{message} — A list of captured message condition objects (or \code{NULL} if none).
\item \code{error} — An error condition object if an error occurred (or \code{NULL} otherwise).
}
}
\description{
Evaluates an expression while capturing and returning any warning, message, or error conditions as structured objects.
This allows advanced inspection of errors and warnings (including class, call, and metadata) instead of storing only their messages.
}
\examples{
# 1. Normal evaluation
catch_conditions({ 2 + 2 })

# 2. Capture warnings and messages
catch_conditions({
  message("Computation started")
  log(-1)
})

# 3. Capture error and return fallback
res <- catch_conditions(stop("Critical failure"), default = NA)
res$error[[1]]$message    # Inspect full error object

}
